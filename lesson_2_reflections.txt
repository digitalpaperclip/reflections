Lesson 2 reflections

R.e.#1
What happens when you initialize a repository? Why do you need to do it?
Initializing a repository creates a .git-file in the current location.
You need to do it to create said file.

R.e.#2
How is the staging area different from the working directory and the 
repository? What value do you think it offers?
The staging area offers a temporary storage for files to be committed.
This allows the user to select which files to commit, so not all files
have to be committed at once.

R.e.#3
How can you use the staging area to make sure you have one commit per logical change?
You can upload only selected files to the staging area that are affected by
that one logical change.

R.e.#4
What are some situations when branches would be helpful in keeping your history
organized? How would branches help?
This helps when you want to branch out to an experimental version, or different
languages or suppport for different devices. Also useful to creat a backup branch
with the same features as the master branch but a more stable version.

R.e.#5 
How do the diagrams help you visualize the branch structure?
They make the parent-child relationship of the different commits visible which
basically builds up the branch structure.

R.e.#6
What is the result of merging two branches together? Why do we represent it in the
diagram the way we do?
The result is that two branches are merged which instead of just copying the
changes of one branch into the other keeps all the parent commits accessible.
We do represent it in the diagram the way we do because this way visualizes
the parent child relation of the different commits.

R.e.#7
What are the pros and cons of Git's automatic merging vs. always doing merges manually?
Automatic merging saves the user work and eliminates a possibility of human errors. 
On the downside, the automated process does what it's supposed to do, regardless of
whether that's what you acutally want or not.